name: Node.js CI/CD

on:
  push:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [16.x, 18.x]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}

      - name: Install dependencies
        run: npm install

      - name: Build project
        run: npm run build

      - name: Archive production artifacts
        run: tar -czf artifacts.tar.gz -C dist .

      - name: List build artifacts
        run: ls -l artifacts.tar.gz

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts
          path: artifacts.tar.gz

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/localdev'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-artifacts
          path: .

      - name: List downloaded files
        run: ls -l

      - name: Extract build artifacts
        run: |
          mkdir -p artifacts
          tar -xzf artifacts.tar.gz -C artifacts

      - name: Check extracted files
        run: ls -l artifacts

      - name: Setup SSH
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          SSH_USER: ${{ secrets.SSH_USER }}
          SSH_HOST: ${{ secrets.SSH_HOST }}
        run: |
          mkdir -p ~/.ssh
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H $SSH_HOST >> ~/.ssh/known_hosts

      - name: Create target directory on EC2
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          SSH_USER: ${{ secrets.SSH_USER }}
          SSH_HOST: ${{ secrets.SSH_HOST }}
        run: ssh -o StrictHostKeyChecking=no $SSH_USER@$SSH_HOST 'sudo mkdir -p /var/www && sudo chown -R $SSH_USER:$SSH_USER /var/www'

      - name: Check artifact directory
        run: ls -l artifacts

      - name: Copy artifacts via SSH
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          SSH_USER: ${{ secrets.SSH_USER }}
          SSH_HOST: ${{ secrets.SSH_HOST }}
        run: scp -r artifacts/* $SSH_USER@$SSH_HOST:/var/www

      - name: Install Node.js and PM2 on EC2
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          SSH_USER: ${{ secrets.SSH_USER }}
          SSH_HOST: ${{ secrets.SSH_HOST }}
        run: |
          ssh -o StrictHostKeyChecking=no $SSH_USER@$SSH_HOST '
            curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash - &&
            sudo apt-get install -y nodejs &&
            sudo npm install -g pm2 &&
            echo "Node.js and PM2 installed."'

      - name: Deploy application on EC2
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          SSH_USER: ${{ secrets.SSH_USER }}
          SSH_HOST: ${{ secrets.SSH_HOST }}
          MONGO_URL: ${{ secrets.MONGO_URI }}
          ADMIN_EMAIL: ${{ secrets.ADMIN_EMAIL }}
          ADMIN_PASSWORD: ${{ secrets.ADMIN_PASSWORD }}
        run: |
          ssh -o StrictHostKeyChecking=no $SSH_USER@$SSH_HOST '
            cd /var/www &&
            echo "MONGO_URI=${{ secrets.MONGO_URI }}" >> .env &&
            npm install --production &&
            pm2 restart my-app || pm2 start server.js --name "my-app" &&
            pm2 save &&
            echo "Application deployed."'

      - name: Clean up
        run: rm -rf ~/.ssh/id_rsa artifacts
